app:
  name: catalogV1.12
  type: docker-compose
  domain: catalogv1-12-u23037.vm.elestio.app
  branch: develop
  buildCommand: |
    # Install frontend dependencies and build
    cd frontend
    npm ci
    npm run build
    
    # Install backend dependencies
    cd ../backend
    pip install -r requirements.txt

  postDeployCommand: |
    # Run database migrations
    docker-compose exec -T backend alembic upgrade head
    
    # Initialize MinIO bucket
    docker-compose exec -T backend python -c "
    from app.core.database import init_minio
    init_minio()
    "

services:
  frontend:
    port: 3000
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_PUBLIC_URL=${VITE_PUBLIC_URL}
      - VITE_APP_NAME=${VITE_APP_NAME}
      - VITE_APP_VERSION=${VITE_APP_VERSION}
      - VITE_ENABLE_PWA=${VITE_ENABLE_PWA}
      - VITE_ENABLE_ANALYTICS=${VITE_ENABLE_ANALYTICS}
      - VITE_ENABLE_ERROR_REPORTING=${VITE_ENABLE_ERROR_REPORTING}
      - VITE_DEFAULT_LANGUAGE=${VITE_DEFAULT_LANGUAGE}
      - VITE_ITEMS_PER_PAGE=${VITE_ITEMS_PER_PAGE}
      - VITE_STORAGE_PREFIX=${VITE_STORAGE_PREFIX}
      - VITE_AUTH_TOKEN_KEY=${VITE_AUTH_TOKEN_KEY}
      - VITE_USER_SETTINGS_KEY=${VITE_USER_SETTINGS_KEY}
      - VITE_CACHE_TTL=${VITE_CACHE_TTL}
      - VITE_STALE_TIME=${VITE_STALE_TIME}
      - VITE_RETRY_ATTEMPTS=${VITE_RETRY_ATTEMPTS}
      - VITE_MAX_FILE_SIZE=${VITE_MAX_FILE_SIZE}
      - VITE_ALLOWED_FILE_TYPES=${VITE_ALLOWED_FILE_TYPES}
      - VITE_TOAST_DURATION=${VITE_TOAST_DURATION}
      - VITE_ENABLE_PUSH_NOTIFICATIONS=${VITE_ENABLE_PUSH_NOTIFICATIONS}

  backend:
    port: 8000
    environment:
      - API_V1_STR=${API_V1_STR}
      - PROJECT_NAME=${PROJECT_NAME}
      - VERSION=${VERSION}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_URL=${MINIO_URL}
      - MINIO_SECURE=${MINIO_SECURE}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - HOST=${HOST}
      - PORT=${PORT}
      - WORKERS=${WORKERS}
      - RELOAD=${RELOAD}
      - DEBUG=${DEBUG}
      - LOG_LEVEL=${LOG_LEVEL}

  postgres:
    port: 5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    port: 6379
    volumes:
      - redis_data:/data

  minio:
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data

volumes:
  postgres_data:
    name: catalog_postgres_data
  redis_data:
    name: catalog_redis_data
  minio_data:
    name: catalog_minio_data

reverseProxy:
  - path: /
    target: http://frontend:3000
  - path: /api
    target: http://backend:8000
    stripPrefix: true
  - path: /minio
    target: http://minio:9000
    stripPrefix: true
  - path: /minio-console
    target: http://minio:9001
    stripPrefix: true

nginx:
  recreateConfig: true
  customConfig: |
    # Load configuration from our production nginx config
    include /etc/nginx/conf.d/nginx.prod.conf;

monitoring:
  - name: Frontend Health
    url: https://${DOMAIN}
    interval: 30s
    
  - name: Backend Health
    url: https://${DOMAIN}/api/health
    interval: 30s
    
  - name: MinIO Console
    url: https://${DOMAIN}:9001
    interval: 30s

backup:
  - name: Database Backup
    source: /var/lib/postgresql/data
    schedule: "0 0 * * *"
    retention: 7
    
  - name: MinIO Backup
    source: /data/minio
    schedule: "0 0 * * *"
    retention: 7

maintenance:
  update_schedule: "0 2 * * 0"  # Every Sunday at 2 AM
  auto_update: false
