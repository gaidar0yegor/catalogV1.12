name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: catalog_user
          POSTGRES_PASSWORD: catalog_password
          POSTGRES_DB: catalog_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://catalog_user:catalog_password@localhost:5432/catalog_db
        REDIS_URL: redis://localhost:6379
      run: |
        cd backend
        pytest

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set environment name
      id: env_name
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "env_name=production" >> $GITHUB_OUTPUT
        else
          echo "env_name=staging" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Elestio
      uses: elestio/action-deploy@v1
      with:
        service-id: ${{ secrets.ELESTIO_SERVICE_ID }}
        api-token: ${{ secrets.ELESTIO_API_TOKEN }}
        environment: ${{ steps.env_name.outputs.env_name }}
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
        MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

    - name: Run database migrations
      if: success()
      uses: elestio/action-exec@v1
      with:
        service-id: ${{ secrets.ELESTIO_SERVICE_ID }}
        api-token: ${{ secrets.ELESTIO_API_TOKEN }}
        command: |
          docker-compose exec -T backend alembic upgrade head

    - name: Notify deployment status
      if: always()
      uses: elestio/action-notify@v1
      with:
        service-id: ${{ secrets.ELESTIO_SERVICE_ID }}
        api-token: ${{ secrets.ELESTIO_API_TOKEN }}
        status: ${{ job.status }}
        environment: ${{ steps.env_name.outputs.env_name }}
        message: |
          Deployment to ${{ steps.env_name.outputs.env_name }} ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

  cleanup:
    needs: [test, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup resources
      run: |
        echo "Cleaning up resources..."
        # Add cleanup steps if needed
